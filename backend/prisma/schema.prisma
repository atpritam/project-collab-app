generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  emailVerified DateTime?
  password      String?   // not for OAuth Users
  image         String?
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  UserInfo      UserInfo[]
  UserSettings  UserSettings?
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model UserInfo {
  id          String   @id @default(cuid())
  userId      String   @unique
  bio         String?
  skills      String?
  jobTitle    String? 
  department  String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model UserSettings {
  id                            String   @id @default(cuid())
  userId                        String   @unique
  
  // Collaboration Preferences
  autoAcceptTaskAssignments     Boolean  @default(true)
  taskReminderNotifications     Boolean  @default(true)
  showDueDatesInLocalTimezone   Boolean  @default(true)
  
  // Email Notifications
  emailProjectInvitations       Boolean  @default(true)
  emailTaskAssignments          Boolean  @default(true)
  emailTaskDueDateReminders     Boolean  @default(true)
  emailComments                 Boolean  @default(true)
  
  // In-App Notifications
  inAppProjectUpdates           Boolean  @default(true)
  inAppRoleChanges              Boolean  @default(true)
  
  // Theme Preferences
  darkMode                      Boolean  @default(false)
  
  createdAt                     DateTime @default(now())
  updatedAt                     DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  id         String
  email      String
  code       String   @unique
  expiresAt  DateTime
  createdAt  DateTime @default(now())

  @@unique([id, code])
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  email     String
  token     String   @unique
  expiresAt DateTime
  createdAt DateTime @default(now())
}

model DeleteAccountToken {
  id        String   @id @default(uuid())
  email     String   
  code      String
  expiresAt DateTime
  createdAt DateTime @default(now())
}